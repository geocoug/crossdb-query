---
name: "ci/cd"

on:
  push:
  pull_request:
  workflow_dispatch:

jobs:
  python-tests:
    services:
      postgres:
        image: postgis/postgis:16-3.4-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: dev
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    name: ${{ matrix.os }}-python-${{ matrix.python-version }}
    strategy:
      matrix:
        os:
          - ubuntu-latest
          # - macos-latest
          # - windows-latest
        python-version:
          - "3.10"
          - "3.11"
          - "3.12"
      fail-fast: false
    runs-on: ${{ matrix.os }}
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
      - name: Import PostgreSQL data
        run: |
          psql -h localhost -U postgres -d dev -f tests/data.sql
        env:
          PGPASSWORD: postgres
      - name: Set up uv
        if: ${{ matrix.os == 'ubuntu-latest' || matrix.os == 'macos-latest' }}
        run: curl -LsSf https://astral.sh/uv/install.sh | sh
      - name: Set up uv
        if: ${{ matrix.os == 'windows-latest' }}
        run: irm https://astral.sh/uv/install.ps1 | iex
        shell: powershell
      - name: Setup Python ${{ matrix.python-version }}
        run: |
          uv python install ${{ matrix.python-version }}
          uv venv
      - name: Activate virtual environment for Linux and macOS
        if: ${{ matrix.os == 'ubuntu-latest' || matrix.os == 'macos-latest' }}
        run: source .venv/bin/activate
      - name: Activate virtual environment for Windows
        if: ${{ matrix.os == 'windows-latest' }}
        run: .venv\Scripts\Activate
        shell: powershell
      - name: Install dependencies for Linux and macOS
        if: ${{ matrix.os == 'ubuntu-latest' || matrix.os == 'macos-latest' }}
        run: |
          if [ -f requirements.txt ]; then uv pip install -r requirements.txt; fi
      - name: Install dependencies for Windows
        if: ${{ matrix.os == 'windows-latest' }}
        run: |
          if (Test-Path requirements.txt) { uv pip install -r requirements.txt }
        shell: powershell
      - name: Test with pytest
        run: |
          uv pip install pytest
          uv run pytest tests
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: dev

  pypi-publish:
    needs: python-tests
    name: PyPI Publish
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
      - name: Build and publish
        env:
          TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          python -m pip install --upgrade build twine
          python -m build --sdist --wheel --outdir dist/
          python -m twine upload --skip-existing dist/*

  docker-build:
    needs: python-tests
    name: Docker Build+Push
    uses: geocoug/github-actions-templates/.github/workflows/docker-build.yml@main
    permissions:
      contents: read
      packages: write
      pull-requests: write
    with:
      ghcr-enable: true
      image-names: |
        ghcr.io/${{ github.repository }}
      tag-rules: |
        type=raw,value=latest,enable=${{ endsWith(github.ref, github.event.repository.default_branch) }}
        type=ref,event=pr
        type=ref,event=branch
        type=semver,pattern={{version}}
        type=raw,value=gha-${{ github.run_id }}
